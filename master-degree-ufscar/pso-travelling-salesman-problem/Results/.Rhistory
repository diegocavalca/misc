clear
clr
historico <- read.csv(file="historico.csv", head=TRUE, sep=";")
historico <- read.csv(file="/Users/diegocavalca/MEGA/Profissional/Projetos/ForecastingDespesasMarilia/historico.csv", head=TRUE, sep=";")
historico <- read.csv(file="/Volumes/Macintosh/Users/diegocavalca/MEGA/Profissional/Projetos/ForecastingDespesasMarilia/historico.csv", head=TRUE, sep=";")
clear
clr
cls
erase.screen()
erase.screen()
historico <- read.csv(file="/Volumes/Macintosh/Users/diegocavalca/MEGA/Profissional/Projetos/ForecastingDespesasMarilia/historico.csv", head=FALSE, sep=";")
historico <- read.csv(file="/Volumes/Macintosh/Users/diegocavalca/MEGA/Profissional/Projetos/ForecastingDespesasMarilia/historico.csv", head=TRUE, sep=";")
historico <- read.csv(file="/Volumes/Macintosh/Users/diegocavalca/MEGA/Profissional/Projetos/ForecastingDespesasMarilia/historico.csv", head=TRUE, sep=";")
historico <- read.csv(file="/Volumes/Macintosh/Users/diegocavalca/MEGA/Profissional/Projetos/ForecastingDespesasMarilia/historico.csv", head=TRUE, sep=";")
historico <- read.csv(file="/Volumes/Macintosh/Users/diegocavalca/MEGA/Profissional/Projetos/ForecastingDespesasMarilia/historico.csv", head=TRUE, sep=",")
historico <- read.csv(file="/Users/diegocavalca/MEGA/Profissional/Projetos/ForecastingDespesasMarilia/historico.csv", head=TRUE, sep=";")
historico <- read.csv(file="/Users/diegocavalca/MEGA/Profissional/Projetos/ForecastingDespesasMarilia/historico.csv", head=TRUE, sep=";", fileEncoding="latin1")
View(historico)
View(historico)
main="Decomposicao historica")
xlab = "Periodo",
type="o",
xaxt="n")
grid()
grid()
grid()
grid()
axis(1, at = seq(periodoHistorico[1], periodoHistorico[2], along = serie), labels = format(seq(as.Date("2013-01-01"), by = "month", along = serie), "%m/%Y"))
legend('topright',
source('~/MEGA/Profissional/Projetos/ForecastingDespesasMarilia/Forecasting.R')
legend('topright',
legend('topright',
legend('topright',
legend('topright',
legend('topright',
legend('topright',
legend('topright',
legend('topright',
legend('topright',
legend('topright',
legend('topright',
historico <- read.csv(file="/Users/diegocavalca/MEGA/Profissional/Projetos/ForecastingDespesasMarilia/historico.csv", head=TRUE, sep=";", fileEncoding="UCS-2LE")
latin1
latin1
latin1
latin1
latin1
View(historico)
historico <- read.table("~/MEGA/Profissional/Projetos/ForecastingDespesasMarilia/historico.csv", encoding="UTF8", row.names=1, sep=";", quote="\"")
View(historico)
historico <- read.csv(file="/Users/diegocavalca/MEGA/Profissional/Projetos/ForecastingDespesasMarilia/historico.csv", head=TRUE, sep=";", fileEncoding="UTF8")
historico <- read.csv(file="/Users/diegocavalca/MEGA/Profissional/Projetos/ForecastingDespesasMarilia/historico.csv", head=TRUE, sep=";", fileEncoding="UTF8")
historico <- read.csv(file="/Users/diegocavalca/MEGA/Profissional/Projetos/ForecastingDespesasMarilia/historico.csv", head=TRUE, sep=";", fileEncoding="LATIN1")
View(historico)
# Imprime as variaveis existentes
cex=.75)
cex=.75)
grid()
cex=.75)
holt <- HoltWinters(serie)
# Plota a serie temporal
serie<-ts(historico$VALOR,start=c(2013,1),end=c(2014,12),frequency=12)
periodoHistorico = attributes(serie)$tsp
holt <- HoltWinters(serie)
xaxt="n")
xaxt="n")
grid()
axis(1, at = seq(periodoHistorico[1], periodoHistorico[2], along = serie), labels = format(seq(as.Date("2013-01-01"), by = "month", along = serie), "%m/%Y"))
legend('topright',
c("Historico","HW (Forecasting)") ,
col=c('black', 'red'),
lty=1,
bty='n',
cex=.75)
# Plota a decomposicao da serie
plot(fitted(holt),
main="Decomposicao historica")
#Realiza a previsao para 12 meses a frente (95% intervalo de confianca)
p <- predict(holt, 12, prediction.interval = FALSE, level = 0.95)
periodoPrevisao = attributes(p)$tsp;
# Plota cen?rio forecasting...
plot(holt, p,
type = "o",
main = "Forecasting - Proximos 12 meses",
ylab = "Despesas (R$)",
xlab = "Periodo",
xaxt = "n")
grid()
axis(1, at = seq(periodoHistorico[1], periodoHistorico[2], along = serie), labels = format(seq(as.Date("2013-01-01"), by = "month", along = serie), "%m/%Y"))
axis(1, at = seq(periodoPrevisao[1], periodoPrevisao[2], along = p), labels = format(seq(as.Date("2015-01-01"), by = "month", along = p), "%m/%Y"))
legend('topright',
c("Historico","HW (Forecasting)") ,
col=c('black', 'red'),
lty=1,
bty='n',
cex=.75)
require(graphics)
options(scipen = 10)
# Dados historicos (2013-2014)
#historico <- read.csv(file="C:/Users/Diego/Desktop/DESPESAS PREFEITURA MUNICIPAL DE MARILIA/historico.csv", head=TRUE, sep=";")
historico <- read.csv(file="/Users/diegocavalca/MEGA/Profissional/Projetos/ForecastingDespesasMarilia/historico.csv", head=TRUE, sep=";", fileEncoding="LATIN1")
# Imprime as variaveis existentes
names(historico)
# Serie temporal historica (01/2013 a 12/2014)
serie<-ts(historico$VALOR,start=c(2013,1),end=c(2014,12),frequency=12)
periodoHistorico = attributes(serie)$tsp
# Realiza o metodo Holt-Winters
holt <- HoltWinters(serie)
# Plota a serie temporal
plot(holt,
main = "Holt-Winters - Balanco de despesas (01/2013 a 12/2014)",
ylab = "Despesas (R$)",
xlab = "Periodo",
type="o",
xaxt="n")
grid()
axis(1, at = seq(periodoHistorico[1], periodoHistorico[2], along = serie), labels = format(seq(as.Date("2013-01-01"), by = "month", along = serie), "%m/%Y"))
legend('topright',
c("Historico","HW (Forecasting)") ,
col=c('black', 'red'),
lty=1,
bty='n',
cex=.75)
# Plota a decomposicao da serie
plot(fitted(holt),
main="Decomposicao historica")
#Realiza a previsao para 12 meses a frente (95% intervalo de confianca)
p <- predict(holt, 12, prediction.interval = FALSE, level = 0.95)
periodoPrevisao = attributes(p)$tsp;
# Plota cen?rio forecasting...
plot(holt, p,
type = "o",
main = "Forecasting - Proximos 12 meses",
ylab = "Despesas (R$)",
xlab = "Periodo",
xaxt = "n")
grid()
axis(1, at = seq(periodoHistorico[1], periodoHistorico[2], along = serie), labels = format(seq(as.Date("2013-01-01"), by = "month", along = serie), "%m/%Y"))
axis(1, at = seq(periodoPrevisao[1], periodoPrevisao[2], along = p), labels = format(seq(as.Date("2015-01-01"), by = "month", along = p), "%m/%Y"))
legend('topright',
c("Historico","HW (Forecasting)") ,
col=c('black', 'red'),
lty=1,
bty='n',
cex=.75)
require(graphics)
options(scipen = 10)
# Dados historicos (2013-2014)
#historico <- read.csv(file="C:/Users/Diego/Desktop/DESPESAS PREFEITURA MUNICIPAL DE MARILIA/historico.csv", head=TRUE, sep=";")
historico <- read.csv(file="/Users/diegocavalca/MEGA/Profissional/Projetos/ForecastingDespesasMarilia/historico.csv", head=TRUE, sep=";", fileEncoding="LATIN1")
# Imprime as variaveis existentes
names(historico)
# Serie temporal historica (01/2013 a 12/2014)
serie<-ts(historico$VALOR,start=c(2013,1),end=c(2014,12),frequency=12)
periodoHistorico = attributes(serie)$tsp
# Realiza o metodo Holt-Winters
holt <- HoltWinters(serie)
# Plota a serie temporal
plot(holt,
main = "Holt-Winters - Balanco de despesas (01/2013 a 12/2014)",
ylab = "Despesas (R$)",
xlab = "Periodo",
type="o",
xaxt="n")
grid()
axis(1, at = seq(periodoHistorico[1], periodoHistorico[2], along = serie), labels = format(seq(as.Date("2013-01-01"), by = "month", along = serie), "%m/%Y"))
legend('topright',
c("Historico","HW (Forecasting)") ,
col=c('black', 'red'),
lty=1,
bty='n',
cex=.75)
# Plota a decomposicao da serie
plot(fitted(holt),
main="Decomposicao historica")
#Realiza a previsao para 12 meses a frente (95% intervalo de confianca)
p <- predict(holt, 12, prediction.interval = FALSE, level = 0.95)
periodoPrevisao = attributes(p)$tsp;
# Plota cen?rio forecasting...
plot(holt, p,
type = "o",
main = "Forecasting - Proximos 12 meses",
ylab = "Despesas (R$)",
xlab = "Periodo",
xaxt = "n")
grid()
axis(1, at = seq(periodoHistorico[1], periodoHistorico[2], along = serie), labels = format(seq(as.Date("2013-01-01"), by = "month", along = serie), "%m/%Y"))
axis(1, at = seq(periodoPrevisao[1], periodoPrevisao[2], along = p), labels = format(seq(as.Date("2015-01-01"), by = "month", along = p), "%m/%Y"))
legend('topright',
c("Historico","HW (Forecasting)") ,
col=c('black', 'red'),
lty=1,
bty='n',
cex=.75)
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# Now we download, install and initialize the H2O package for R.
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-turchin/9/R")))
# Now we download, install and initialize the H2O package for R.
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-turchin/9/R")))
demo(h2o.kmeans)
demo(h2o.kmeans)
demo(h2o.kmeans)
library(h2o)
localH2O = h2o.init(nthreads=-1)
# Finally, let's run a demo to see H2O at work.
demo(h2o.kmeans)
# Next, we download packages that H2O depends on.
pkgs <- c("methods","statmod","stats","graphics","RCurl","jsonlite","tools","utils")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
plot(x,y, type = "l", lwd = 2, xlim = c(-3.5,3.5))
plot(x,y, type = "l", lwd = 2, xlim = c(-3.5,3.5))
source('~/MEGA/Pessoal/Estudos/Mestrado/CCO-740 Reconhecimento de Padrões/Aula 04/LinearDiscriminantNormal.R')
source('~/MEGA/Pessoal/Estudos/Mestrado/CCO-740 Reconhecimento de Padrões/Aula 04/LinearDiscriminantNormal.R')
ui = c(3, 6)
wi = (1/o^2) * ui;
matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE)
matrix(c(1,2,3, 11,12,13), byrow = TRUE)
matrix(c(1,2,3, 11,12,13), ncol = 3, byrow = TRUE)
matrix(c(2, 6), ncol = 2, byrow = TRUE)
matrix(rexp(200), 10)
matrix(rexp(200), 2)
point((0,0));
point((0 0));
point([0 0]);
points([0 0]);
points( [0 0])
points( c(0 0) )
plot(c(-1, 26), 0:1, type = "n", axes = FALSE)
plot(c(-1, 26), 0:1, type = "n", axes = FALSE)
plot(c(-1, 26), 0:1)
, type = "n", axes = FALSE
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
plot(c(y))
source('~/.active-rstudio-document')
n = c(2, 3, 5)
source('~/.active-rstudio-document')
n = c(2, 3, 5)
source('~/.active-rstudio-document')
n = c(2, 3, 5)
s = c("aa", "bb", "cc")
b = c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)
mdat <- matrix(c(0,0 1,1 2,2 3,3 1,2 2,3 3,4 4,4), nrow = 8, byrow = TRUE)
mdat <- matrix(c(0,0, 1,1, 2,2, 3,3, 1,2, 2,3, 3,4 4,4), nrow = 8, byrow = TRUE)
mdat <- matrix(c(0,0, 1,1, 2,2, 3,3, 1,2, 2,3, 3,4, 4,4), nrow = 8, ncol = 2, byrow = TRUE)
mdat = matrix(c(0,0, 1,1, 2,2, 3,3, 1,2, 2,3, 3,4, 4,4), nrow = 8, ncol = 2, byrow = TRUE)
plot(c(mdat))
mdate
mdat]
mdat
plot(mdat)
source('~/MEGA/Pessoal/Estudos/Mestrado/CCO-740 Reconhecimento de Padrões/Prova 1/Listas de exercícios/Solutions.R')
mean(data)
source('~/MEGA/Pessoal/Estudos/Mestrado/CCO-740 Reconhecimento de Padrões/Prova 1/Listas de exercícios/Solutions.R')
source('~/MEGA/Pessoal/Estudos/Mestrado/CCO-740 Reconhecimento de Padrões/Prova 1/Listas de exercícios/Solutions.R')
View(dataset)
source('~/MEGA/Pessoal/Estudos/Mestrado/CCO-740 Reconhecimento de Padrões/Prova 1/Listas de exercícios/Solutions.R')
source('~/MEGA/Pessoal/Estudos/Mestrado/CCO-740 Reconhecimento de Padrões/Prova 1/Listas de exercícios/Solutions.R')
source('~/MEGA/Pessoal/Estudos/Mestrado/CCO-740 Reconhecimento de Padrões/Prova 1/Listas de exercícios/Solutions.R')
source('~/MEGA/Pessoal/Estudos/Mestrado/CCO-740 Reconhecimento de Padrões/Prova 1/Listas de exercícios/Solutions.R')
source('~/MEGA/Pessoal/Estudos/Mestrado/CCO-740 Reconhecimento de Padrões/Prova 1/Listas de exercícios/Solutions.R')
source('~/MEGA/Pessoal/Estudos/Mestrado/CCO-740 Reconhecimento de Padrões/Prova 1/Listas de exercícios/Solutions.R')
cbind(x1 = 3, x2 = c(4:1, 2:5))
cbind(3, c(4:1, 2:5))
data = cbind(c(0, 1, 2, 3, 1, 2, 3, 4) , c(0, 1, 2, 3, 2, 3, 4, 4))
data
rowSums(data)
colSums(data)
data = cbind(c(0, 1, 2, 3, 1, 2, 3, 4) , c(0, 1, 2, 3, 2, 3, 4, 4))
colMeas(data)
data = cbind(c(0, 1, 2, 3, 1, 2, 3, 4) , c(0, 1, 2, 3, 2, 3, 4, 4))
colMeans(data)
19/8
cov(data)
source('~/MEGA/Pessoal/Estudos/Mestrado/CCO-740 Reconhecimento de Padrões/Prova 1/Listas de exercícios/Solutions.R')
source('~/MEGA/Pessoal/Estudos/Mestrado/CCO-740 Reconhecimento de Padrões/Prova 1/Listas de exercícios/Solutions.R')
cov(data)
var(data)
var(data[,1])
data[,1] - rowMeans(data[,1])
data[,1] - mean(data[,1])
data[,1])
data[,1]
data[,1]'
fsdf
sdf
data[,1] - mean(transpose(data[,1]))
data
transpose(data[,1])
transpose(data[1,])
data[1,]
transpose(data[,1])
data[,1]
colMeans(data[,1])
sdResult
sdResult <- sd(dataset$BESTROUTE)
sdResult
source('/Volumes/Toshiba/Github/mestrado/CCO-727/Trabalho2-PSO_TSP/Results/Summary.R')
